// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proto/tradeapi/v1/security.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Security price sign.
/// Разрешенный знак цены у инструмента.
enum Proto_Tradeapi_V1_PriceSign: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// Value is not specified. Do not use.
  /// Значение не указано. Не использовать.
  case unspecified // = 0

  /// Positive.
  /// Положительная цена.
  case positive // = 1

  /// Non negative.
  /// Не отрицательная цена.
  case nonNegative // = 2

  /// Any.
  /// Любая цена, без ограничения на знак.
  case any // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .positive
    case 2: self = .nonNegative
    case 3: self = .any
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .positive: return 1
    case .nonNegative: return 2
    case .any: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_Tradeapi_V1_PriceSign: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Proto_Tradeapi_V1_PriceSign] = [
    .unspecified,
    .positive,
    .nonNegative,
    .any,
  ]
}

#endif  // swift(>=4.2)

/// Security.
/// Инструмент.
struct Proto_Tradeapi_V1_Security {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Security code.
  /// Код инструмента.
  var code: String = String()

  /// Security board.
  /// Основной режим торгов инструмента.
  var board: String = String()

  /// Market.
  /// Рынок инструмента.
  var market: Proto_Tradeapi_V1_Market = .unspecified

  /// Number of decimal digits in the price value.
  /// Количество знаков в дробной части цены.
  var decimals: Int32 = 0

  /// Lot size.
  /// Размер лота.
  var lotSize: Int32 = 0

  /// Price min step.
  /// Минимальный шаг цены.
  var minStep: Int32 = 0

  /// Currency.
  /// Валюта номинала инструмента.
  var currency: String = String()

  /// Security name.
  /// Название инструмента.
  var shortName: String = String()

  /// Параметры инструмента. Значение представлено в виде битовой маски.
  /// 0 Нет параметров.
  /// 1 Инструмент торгуется на Бирже.
  /// 2 Инструмент допущен к торгам у Брокера - существенно для НЕ ГЛАВНЫХ трейдеров, главным доступны все инструменты, торгуемые на биржах.
  /// 4 Рыночные заявки (без ограничения по цене) разрешены.
  /// 8 Признак маржинальности бумаги.
  /// 16 Опцион Call.
  /// 32 Опцион Put.
  /// 48 Фьючерс: Call | Put.
  /// 64 Разрешен для резидентов.
  /// 128 Разрешен для нерезидентов.
  var properties: Int32 = 0

  /// Timezone name.
  /// Имя таймзоны.
  var timeZoneName: String = String()

  /// The price unit cost for one security (not for the lot)), excluding accrued interest.
  /// Стоимость пункта цены одного инструмента (не лота), без учета НКД.
  var bpCost: Double = 0

  /// Current accrued interest.
  /// Текущий НКД.
  var accruedInterest: Double = 0

  /// Allowed price: positive, non negative, any.
  /// Допустимая цена: положительная, неотрицательная, любая.
  var priceSign: Proto_Tradeapi_V1_PriceSign = .unspecified

  /// Ticker.
  /// Код инструмента (тикер) на биржевой площадке листинга.
  var ticker: String = String()

  /// The split ratio of a security in one standard lot.
  /// Коэффициент дробления ценной бумаги в одном стандартном лоте.
  var lotDivider: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proto_Tradeapi_V1_PriceSign: @unchecked Sendable {}
extension Proto_Tradeapi_V1_Security: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto.tradeapi.v1"

extension Proto_Tradeapi_V1_PriceSign: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRICE_SIGN_UNSPECIFIED"),
    1: .same(proto: "PRICE_SIGN_POSITIVE"),
    2: .same(proto: "PRICE_SIGN_NON_NEGATIVE"),
    3: .same(proto: "PRICE_SIGN_ANY"),
  ]
}

extension Proto_Tradeapi_V1_Security: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Security"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "board"),
    3: .same(proto: "market"),
    4: .same(proto: "decimals"),
    5: .standard(proto: "lot_size"),
    6: .standard(proto: "min_step"),
    7: .same(proto: "currency"),
    9: .standard(proto: "short_name"),
    10: .same(proto: "properties"),
    11: .standard(proto: "time_zone_name"),
    12: .standard(proto: "bp_cost"),
    13: .standard(proto: "accrued_interest"),
    14: .standard(proto: "price_sign"),
    15: .same(proto: "ticker"),
    16: .standard(proto: "lot_divider"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.board) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.market) }()
      case 4: try { try decoder.decodeSingularSInt32Field(value: &self.decimals) }()
      case 5: try { try decoder.decodeSingularSInt32Field(value: &self.lotSize) }()
      case 6: try { try decoder.decodeSingularSInt32Field(value: &self.minStep) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.currency) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.shortName) }()
      case 10: try { try decoder.decodeSingularInt32Field(value: &self.properties) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.timeZoneName) }()
      case 12: try { try decoder.decodeSingularDoubleField(value: &self.bpCost) }()
      case 13: try { try decoder.decodeSingularDoubleField(value: &self.accruedInterest) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self.priceSign) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self.ticker) }()
      case 16: try { try decoder.decodeSingularSInt32Field(value: &self.lotDivider) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.board.isEmpty {
      try visitor.visitSingularStringField(value: self.board, fieldNumber: 2)
    }
    if self.market != .unspecified {
      try visitor.visitSingularEnumField(value: self.market, fieldNumber: 3)
    }
    if self.decimals != 0 {
      try visitor.visitSingularSInt32Field(value: self.decimals, fieldNumber: 4)
    }
    if self.lotSize != 0 {
      try visitor.visitSingularSInt32Field(value: self.lotSize, fieldNumber: 5)
    }
    if self.minStep != 0 {
      try visitor.visitSingularSInt32Field(value: self.minStep, fieldNumber: 6)
    }
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 7)
    }
    if !self.shortName.isEmpty {
      try visitor.visitSingularStringField(value: self.shortName, fieldNumber: 9)
    }
    if self.properties != 0 {
      try visitor.visitSingularInt32Field(value: self.properties, fieldNumber: 10)
    }
    if !self.timeZoneName.isEmpty {
      try visitor.visitSingularStringField(value: self.timeZoneName, fieldNumber: 11)
    }
    if self.bpCost != 0 {
      try visitor.visitSingularDoubleField(value: self.bpCost, fieldNumber: 12)
    }
    if self.accruedInterest != 0 {
      try visitor.visitSingularDoubleField(value: self.accruedInterest, fieldNumber: 13)
    }
    if self.priceSign != .unspecified {
      try visitor.visitSingularEnumField(value: self.priceSign, fieldNumber: 14)
    }
    if !self.ticker.isEmpty {
      try visitor.visitSingularStringField(value: self.ticker, fieldNumber: 15)
    }
    if self.lotDivider != 0 {
      try visitor.visitSingularSInt32Field(value: self.lotDivider, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Proto_Tradeapi_V1_Security, rhs: Proto_Tradeapi_V1_Security) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.board != rhs.board {return false}
    if lhs.market != rhs.market {return false}
    if lhs.decimals != rhs.decimals {return false}
    if lhs.lotSize != rhs.lotSize {return false}
    if lhs.minStep != rhs.minStep {return false}
    if lhs.currency != rhs.currency {return false}
    if lhs.shortName != rhs.shortName {return false}
    if lhs.properties != rhs.properties {return false}
    if lhs.timeZoneName != rhs.timeZoneName {return false}
    if lhs.bpCost != rhs.bpCost {return false}
    if lhs.accruedInterest != rhs.accruedInterest {return false}
    if lhs.priceSign != rhs.priceSign {return false}
    if lhs.ticker != rhs.ticker {return false}
    if lhs.lotDivider != rhs.lotDivider {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
