//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: grpc/tradeapi/v1/events.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Grpc_Tradeapi_V1_EventsClient`, then call methods of this protocol to make API calls.
internal protocol Grpc_Tradeapi_V1_EventsClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol? { get }

  func getEvents(
    callOptions: CallOptions?,
    handler: @escaping (Proto_Tradeapi_V1_Event) -> Void
  ) -> BidirectionalStreamingCall<Proto_Tradeapi_V1_SubscriptionRequest, Proto_Tradeapi_V1_Event>
}

extension Grpc_Tradeapi_V1_EventsClientProtocol {
  internal var serviceName: String {
    return "grpc.tradeapi.v1.Events"
  }

  /// Event Service sends events after explicit subscription.
  /// Сервис событий. Отправляет события после вызова соответствующих методов подписки.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func getEvents(
    callOptions: CallOptions? = nil,
    handler: @escaping (Proto_Tradeapi_V1_Event) -> Void
  ) -> BidirectionalStreamingCall<Proto_Tradeapi_V1_SubscriptionRequest, Proto_Tradeapi_V1_Event> {
    return self.makeBidirectionalStreamingCall(
      path: Grpc_Tradeapi_V1_EventsClientMetadata.Methods.getEvents.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEventsInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Grpc_Tradeapi_V1_EventsClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Grpc_Tradeapi_V1_EventsNIOClient")
internal final class Grpc_Tradeapi_V1_EventsClient: Grpc_Tradeapi_V1_EventsClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the grpc.tradeapi.v1.Events service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Grpc_Tradeapi_V1_EventsNIOClient: Grpc_Tradeapi_V1_EventsClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol?

  /// Creates a client for the grpc.tradeapi.v1.Events service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Grpc_Tradeapi_V1_EventsAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol? { get }

  func makeGetEventsCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Proto_Tradeapi_V1_SubscriptionRequest, Proto_Tradeapi_V1_Event>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_EventsAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Grpc_Tradeapi_V1_EventsClientMetadata.serviceDescriptor
  }

  internal var interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetEventsCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Proto_Tradeapi_V1_SubscriptionRequest, Proto_Tradeapi_V1_Event> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Grpc_Tradeapi_V1_EventsClientMetadata.Methods.getEvents.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_EventsAsyncClientProtocol {
  internal func getEvents<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_Tradeapi_V1_Event> where RequestStream: Sequence, RequestStream.Element == Proto_Tradeapi_V1_SubscriptionRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Grpc_Tradeapi_V1_EventsClientMetadata.Methods.getEvents.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEventsInterceptors() ?? []
    )
  }

  internal func getEvents<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Proto_Tradeapi_V1_Event> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Proto_Tradeapi_V1_SubscriptionRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Grpc_Tradeapi_V1_EventsClientMetadata.Methods.getEvents.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Grpc_Tradeapi_V1_EventsAsyncClient: Grpc_Tradeapi_V1_EventsAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Grpc_Tradeapi_V1_EventsClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getEvents'.
  func makeGetEventsInterceptors() -> [ClientInterceptor<Proto_Tradeapi_V1_SubscriptionRequest, Proto_Tradeapi_V1_Event>]
}

internal enum Grpc_Tradeapi_V1_EventsClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Events",
    fullName: "grpc.tradeapi.v1.Events",
    methods: [
      Grpc_Tradeapi_V1_EventsClientMetadata.Methods.getEvents,
    ]
  )

  internal enum Methods {
    internal static let getEvents = GRPCMethodDescriptor(
      name: "GetEvents",
      path: "/grpc.tradeapi.v1.Events/GetEvents",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Grpc_Tradeapi_V1_EventsProvider: CallHandlerProvider {
  var interceptors: Grpc_Tradeapi_V1_EventsServerInterceptorFactoryProtocol? { get }

  /// Event Service sends events after explicit subscription.
  /// Сервис событий. Отправляет события после вызова соответствующих методов подписки.
  func getEvents(context: StreamingResponseCallContext<Proto_Tradeapi_V1_Event>) -> EventLoopFuture<(StreamEvent<Proto_Tradeapi_V1_SubscriptionRequest>) -> Void>
}

extension Grpc_Tradeapi_V1_EventsProvider {
  internal var serviceName: Substring {
    return Grpc_Tradeapi_V1_EventsServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetEvents":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_SubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_Event>(),
        interceptors: self.interceptors?.makeGetEventsInterceptors() ?? [],
        observerFactory: self.getEvents(context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Grpc_Tradeapi_V1_EventsAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Grpc_Tradeapi_V1_EventsServerInterceptorFactoryProtocol? { get }

  /// Event Service sends events after explicit subscription.
  /// Сервис событий. Отправляет события после вызова соответствующих методов подписки.
  func getEvents(
    requestStream: GRPCAsyncRequestStream<Proto_Tradeapi_V1_SubscriptionRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Proto_Tradeapi_V1_Event>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_EventsAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Grpc_Tradeapi_V1_EventsServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Grpc_Tradeapi_V1_EventsServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Grpc_Tradeapi_V1_EventsServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetEvents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_SubscriptionRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_Event>(),
        interceptors: self.interceptors?.makeGetEventsInterceptors() ?? [],
        wrapping: { try await self.getEvents(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Grpc_Tradeapi_V1_EventsServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getEvents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEventsInterceptors() -> [ServerInterceptor<Proto_Tradeapi_V1_SubscriptionRequest, Proto_Tradeapi_V1_Event>]
}

internal enum Grpc_Tradeapi_V1_EventsServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Events",
    fullName: "grpc.tradeapi.v1.Events",
    methods: [
      Grpc_Tradeapi_V1_EventsServerMetadata.Methods.getEvents,
    ]
  )

  internal enum Methods {
    internal static let getEvents = GRPCMethodDescriptor(
      name: "GetEvents",
      path: "/grpc.tradeapi.v1.Events/GetEvents",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
