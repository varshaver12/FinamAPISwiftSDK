//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: grpc/tradeapi/v1/securities.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Grpc_Tradeapi_V1_SecuritiesClient`, then call methods of this protocol to make API calls.
internal protocol Grpc_Tradeapi_V1_SecuritiesClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol? { get }

  func getSecurities(
    _ request: Grpc_Tradeapi_V1_GetSecuritiesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Grpc_Tradeapi_V1_GetSecuritiesRequest, Grpc_Tradeapi_V1_GetSecuritiesResult>
}

extension Grpc_Tradeapi_V1_SecuritiesClientProtocol {
  internal var serviceName: String {
    return "grpc.tradeapi.v1.Securities"
  }

  /// Securities table.
  /// Справочник инструментов.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetSecurities.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getSecurities(
    _ request: Grpc_Tradeapi_V1_GetSecuritiesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Grpc_Tradeapi_V1_GetSecuritiesRequest, Grpc_Tradeapi_V1_GetSecuritiesResult> {
    return self.makeUnaryCall(
      path: Grpc_Tradeapi_V1_SecuritiesClientMetadata.Methods.getSecurities.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSecuritiesInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Grpc_Tradeapi_V1_SecuritiesClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Grpc_Tradeapi_V1_SecuritiesNIOClient")
internal final class Grpc_Tradeapi_V1_SecuritiesClient: Grpc_Tradeapi_V1_SecuritiesClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the grpc.tradeapi.v1.Securities service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Grpc_Tradeapi_V1_SecuritiesNIOClient: Grpc_Tradeapi_V1_SecuritiesClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol?

  /// Creates a client for the grpc.tradeapi.v1.Securities service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Grpc_Tradeapi_V1_SecuritiesAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol? { get }

  func makeGetSecuritiesCall(
    _ request: Grpc_Tradeapi_V1_GetSecuritiesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Grpc_Tradeapi_V1_GetSecuritiesRequest, Grpc_Tradeapi_V1_GetSecuritiesResult>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_SecuritiesAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Grpc_Tradeapi_V1_SecuritiesClientMetadata.serviceDescriptor
  }

  internal var interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetSecuritiesCall(
    _ request: Grpc_Tradeapi_V1_GetSecuritiesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Grpc_Tradeapi_V1_GetSecuritiesRequest, Grpc_Tradeapi_V1_GetSecuritiesResult> {
    return self.makeAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_SecuritiesClientMetadata.Methods.getSecurities.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSecuritiesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_SecuritiesAsyncClientProtocol {
  internal func getSecurities(
    _ request: Grpc_Tradeapi_V1_GetSecuritiesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Grpc_Tradeapi_V1_GetSecuritiesResult {
    return try await self.performAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_SecuritiesClientMetadata.Methods.getSecurities.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetSecuritiesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Grpc_Tradeapi_V1_SecuritiesAsyncClient: Grpc_Tradeapi_V1_SecuritiesAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Grpc_Tradeapi_V1_SecuritiesClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getSecurities'.
  func makeGetSecuritiesInterceptors() -> [ClientInterceptor<Grpc_Tradeapi_V1_GetSecuritiesRequest, Grpc_Tradeapi_V1_GetSecuritiesResult>]
}

internal enum Grpc_Tradeapi_V1_SecuritiesClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Securities",
    fullName: "grpc.tradeapi.v1.Securities",
    methods: [
      Grpc_Tradeapi_V1_SecuritiesClientMetadata.Methods.getSecurities,
    ]
  )

  internal enum Methods {
    internal static let getSecurities = GRPCMethodDescriptor(
      name: "GetSecurities",
      path: "/grpc.tradeapi.v1.Securities/GetSecurities",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Grpc_Tradeapi_V1_SecuritiesProvider: CallHandlerProvider {
  var interceptors: Grpc_Tradeapi_V1_SecuritiesServerInterceptorFactoryProtocol? { get }

  /// Securities table.
  /// Справочник инструментов.
  func getSecurities(request: Grpc_Tradeapi_V1_GetSecuritiesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Grpc_Tradeapi_V1_GetSecuritiesResult>
}

extension Grpc_Tradeapi_V1_SecuritiesProvider {
  internal var serviceName: Substring {
    return Grpc_Tradeapi_V1_SecuritiesServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetSecurities":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpc_Tradeapi_V1_GetSecuritiesRequest>(),
        responseSerializer: ProtobufSerializer<Grpc_Tradeapi_V1_GetSecuritiesResult>(),
        interceptors: self.interceptors?.makeGetSecuritiesInterceptors() ?? [],
        userFunction: self.getSecurities(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Grpc_Tradeapi_V1_SecuritiesAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Grpc_Tradeapi_V1_SecuritiesServerInterceptorFactoryProtocol? { get }

  /// Securities table.
  /// Справочник инструментов.
  func getSecurities(
    request: Grpc_Tradeapi_V1_GetSecuritiesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Grpc_Tradeapi_V1_GetSecuritiesResult
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_SecuritiesAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Grpc_Tradeapi_V1_SecuritiesServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Grpc_Tradeapi_V1_SecuritiesServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Grpc_Tradeapi_V1_SecuritiesServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetSecurities":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Grpc_Tradeapi_V1_GetSecuritiesRequest>(),
        responseSerializer: ProtobufSerializer<Grpc_Tradeapi_V1_GetSecuritiesResult>(),
        interceptors: self.interceptors?.makeGetSecuritiesInterceptors() ?? [],
        wrapping: { try await self.getSecurities(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Grpc_Tradeapi_V1_SecuritiesServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getSecurities'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetSecuritiesInterceptors() -> [ServerInterceptor<Grpc_Tradeapi_V1_GetSecuritiesRequest, Grpc_Tradeapi_V1_GetSecuritiesResult>]
}

internal enum Grpc_Tradeapi_V1_SecuritiesServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Securities",
    fullName: "grpc.tradeapi.v1.Securities",
    methods: [
      Grpc_Tradeapi_V1_SecuritiesServerMetadata.Methods.getSecurities,
    ]
  )

  internal enum Methods {
    internal static let getSecurities = GRPCMethodDescriptor(
      name: "GetSecurities",
      path: "/grpc.tradeapi.v1.Securities/GetSecurities",
      type: GRPCCallType.unary
    )
  }
}
