//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: grpc/tradeapi/v1/portfolios.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Grpc_Tradeapi_V1_PortfoliosClient`, then call methods of this protocol to make API calls.
internal protocol Grpc_Tradeapi_V1_PortfoliosClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol? { get }

  func getPortfolio(
    _ request: Proto_Tradeapi_V1_GetPortfolioRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Tradeapi_V1_GetPortfolioRequest, Proto_Tradeapi_V1_GetPortfolioResult>
}

extension Grpc_Tradeapi_V1_PortfoliosClientProtocol {
  internal var serviceName: String {
    return "grpc.tradeapi.v1.Portfolios"
  }

  /// Returns portfolio.
  /// Возвращает портфель.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPortfolio.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPortfolio(
    _ request: Proto_Tradeapi_V1_GetPortfolioRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Tradeapi_V1_GetPortfolioRequest, Proto_Tradeapi_V1_GetPortfolioResult> {
    return self.makeUnaryCall(
      path: Grpc_Tradeapi_V1_PortfoliosClientMetadata.Methods.getPortfolio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPortfolioInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Grpc_Tradeapi_V1_PortfoliosClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Grpc_Tradeapi_V1_PortfoliosNIOClient")
internal final class Grpc_Tradeapi_V1_PortfoliosClient: Grpc_Tradeapi_V1_PortfoliosClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the grpc.tradeapi.v1.Portfolios service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Grpc_Tradeapi_V1_PortfoliosNIOClient: Grpc_Tradeapi_V1_PortfoliosClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol?

  /// Creates a client for the grpc.tradeapi.v1.Portfolios service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Grpc_Tradeapi_V1_PortfoliosAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol? { get }

  func makeGetPortfolioCall(
    _ request: Proto_Tradeapi_V1_GetPortfolioRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Tradeapi_V1_GetPortfolioRequest, Proto_Tradeapi_V1_GetPortfolioResult>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_PortfoliosAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Grpc_Tradeapi_V1_PortfoliosClientMetadata.serviceDescriptor
  }

  internal var interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeGetPortfolioCall(
    _ request: Proto_Tradeapi_V1_GetPortfolioRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Tradeapi_V1_GetPortfolioRequest, Proto_Tradeapi_V1_GetPortfolioResult> {
    return self.makeAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_PortfoliosClientMetadata.Methods.getPortfolio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPortfolioInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_PortfoliosAsyncClientProtocol {
  internal func getPortfolio(
    _ request: Proto_Tradeapi_V1_GetPortfolioRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Tradeapi_V1_GetPortfolioResult {
    return try await self.performAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_PortfoliosClientMetadata.Methods.getPortfolio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPortfolioInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Grpc_Tradeapi_V1_PortfoliosAsyncClient: Grpc_Tradeapi_V1_PortfoliosAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Grpc_Tradeapi_V1_PortfoliosClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'getPortfolio'.
  func makeGetPortfolioInterceptors() -> [ClientInterceptor<Proto_Tradeapi_V1_GetPortfolioRequest, Proto_Tradeapi_V1_GetPortfolioResult>]
}

internal enum Grpc_Tradeapi_V1_PortfoliosClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Portfolios",
    fullName: "grpc.tradeapi.v1.Portfolios",
    methods: [
      Grpc_Tradeapi_V1_PortfoliosClientMetadata.Methods.getPortfolio,
    ]
  )

  internal enum Methods {
    internal static let getPortfolio = GRPCMethodDescriptor(
      name: "GetPortfolio",
      path: "/grpc.tradeapi.v1.Portfolios/GetPortfolio",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Grpc_Tradeapi_V1_PortfoliosProvider: CallHandlerProvider {
  var interceptors: Grpc_Tradeapi_V1_PortfoliosServerInterceptorFactoryProtocol? { get }

  /// Returns portfolio.
  /// Возвращает портфель.
  func getPortfolio(request: Proto_Tradeapi_V1_GetPortfolioRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Tradeapi_V1_GetPortfolioResult>
}

extension Grpc_Tradeapi_V1_PortfoliosProvider {
  internal var serviceName: Substring {
    return Grpc_Tradeapi_V1_PortfoliosServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPortfolio":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_GetPortfolioRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_GetPortfolioResult>(),
        interceptors: self.interceptors?.makeGetPortfolioInterceptors() ?? [],
        userFunction: self.getPortfolio(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Grpc_Tradeapi_V1_PortfoliosAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Grpc_Tradeapi_V1_PortfoliosServerInterceptorFactoryProtocol? { get }

  /// Returns portfolio.
  /// Возвращает портфель.
  func getPortfolio(
    request: Proto_Tradeapi_V1_GetPortfolioRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Tradeapi_V1_GetPortfolioResult
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_PortfoliosAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Grpc_Tradeapi_V1_PortfoliosServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Grpc_Tradeapi_V1_PortfoliosServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Grpc_Tradeapi_V1_PortfoliosServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "GetPortfolio":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_GetPortfolioRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_GetPortfolioResult>(),
        interceptors: self.interceptors?.makeGetPortfolioInterceptors() ?? [],
        wrapping: { try await self.getPortfolio(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Grpc_Tradeapi_V1_PortfoliosServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'getPortfolio'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPortfolioInterceptors() -> [ServerInterceptor<Proto_Tradeapi_V1_GetPortfolioRequest, Proto_Tradeapi_V1_GetPortfolioResult>]
}

internal enum Grpc_Tradeapi_V1_PortfoliosServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Portfolios",
    fullName: "grpc.tradeapi.v1.Portfolios",
    methods: [
      Grpc_Tradeapi_V1_PortfoliosServerMetadata.Methods.getPortfolio,
    ]
  )

  internal enum Methods {
    internal static let getPortfolio = GRPCMethodDescriptor(
      name: "GetPortfolio",
      path: "/grpc.tradeapi.v1.Portfolios/GetPortfolio",
      type: GRPCCallType.unary
    )
  }
}
