//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: grpc/tradeapi/v1/orders.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Grpc_Tradeapi_V1_OrdersClient`, then call methods of this protocol to make API calls.
internal protocol Grpc_Tradeapi_V1_OrdersClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol? { get }

  func newOrder(
    _ request: Proto_Tradeapi_V1_NewOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Tradeapi_V1_NewOrderRequest, Proto_Tradeapi_V1_NewOrderResult>

  func cancelOrder(
    _ request: Proto_Tradeapi_V1_CancelOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Tradeapi_V1_CancelOrderRequest, Proto_Tradeapi_V1_CancelOrderResult>

  func getOrders(
    _ request: Proto_Tradeapi_V1_GetOrdersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Proto_Tradeapi_V1_GetOrdersRequest, Proto_Tradeapi_V1_GetOrdersResult>
}

extension Grpc_Tradeapi_V1_OrdersClientProtocol {
  internal var serviceName: String {
    return "grpc.tradeapi.v1.Orders"
  }

  /// Creates new order.
  /// Order placement in OrderBook takes some time due to processing speed,
  /// that is why this method returns transaction_id, which can be used
  /// to find corresponding order in GetOrdersRequest or in OrderEvent message
  /// of Events service (EventResponse.event.order).
  /// Создать новую заявку.
  /// На обработку нового поручения по размещению заявки в биржевой стакан
  /// требуется некоторое время, поэтому этот метод возвращает структуру с
  /// transaction_id, которая может быть использована для поиска соответствующей
  /// заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий
  /// (EventResponse.event.order).
  ///
  /// - Parameters:
  ///   - request: Request to send to NewOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newOrder(
    _ request: Proto_Tradeapi_V1_NewOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Tradeapi_V1_NewOrderRequest, Proto_Tradeapi_V1_NewOrderResult> {
    return self.makeUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.newOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewOrderInterceptors() ?? []
    )
  }

  /// Cancels order.
  /// Отменяет заявку.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelOrder(
    _ request: Proto_Tradeapi_V1_CancelOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Tradeapi_V1_CancelOrderRequest, Proto_Tradeapi_V1_CancelOrderResult> {
    return self.makeUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  /// Returns the list of orders.
  /// Возвращает список заявок.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrders.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrders(
    _ request: Proto_Tradeapi_V1_GetOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Proto_Tradeapi_V1_GetOrdersRequest, Proto_Tradeapi_V1_GetOrdersResult> {
    return self.makeUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.getOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Grpc_Tradeapi_V1_OrdersClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Grpc_Tradeapi_V1_OrdersNIOClient")
internal final class Grpc_Tradeapi_V1_OrdersClient: Grpc_Tradeapi_V1_OrdersClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the grpc.tradeapi.v1.Orders service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Grpc_Tradeapi_V1_OrdersNIOClient: Grpc_Tradeapi_V1_OrdersClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol?

  /// Creates a client for the grpc.tradeapi.v1.Orders service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Grpc_Tradeapi_V1_OrdersAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol? { get }

  func makeNewOrderCall(
    _ request: Proto_Tradeapi_V1_NewOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Tradeapi_V1_NewOrderRequest, Proto_Tradeapi_V1_NewOrderResult>

  func makeCancelOrderCall(
    _ request: Proto_Tradeapi_V1_CancelOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Tradeapi_V1_CancelOrderRequest, Proto_Tradeapi_V1_CancelOrderResult>

  func makeGetOrdersCall(
    _ request: Proto_Tradeapi_V1_GetOrdersRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Proto_Tradeapi_V1_GetOrdersRequest, Proto_Tradeapi_V1_GetOrdersResult>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_OrdersAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Grpc_Tradeapi_V1_OrdersClientMetadata.serviceDescriptor
  }

  internal var interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeNewOrderCall(
    _ request: Proto_Tradeapi_V1_NewOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Tradeapi_V1_NewOrderRequest, Proto_Tradeapi_V1_NewOrderResult> {
    return self.makeAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.newOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewOrderInterceptors() ?? []
    )
  }

  internal func makeCancelOrderCall(
    _ request: Proto_Tradeapi_V1_CancelOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Tradeapi_V1_CancelOrderRequest, Proto_Tradeapi_V1_CancelOrderResult> {
    return self.makeAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  internal func makeGetOrdersCall(
    _ request: Proto_Tradeapi_V1_GetOrdersRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Proto_Tradeapi_V1_GetOrdersRequest, Proto_Tradeapi_V1_GetOrdersResult> {
    return self.makeAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.getOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_OrdersAsyncClientProtocol {
  internal func newOrder(
    _ request: Proto_Tradeapi_V1_NewOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Tradeapi_V1_NewOrderResult {
    return try await self.performAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.newOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewOrderInterceptors() ?? []
    )
  }

  internal func cancelOrder(
    _ request: Proto_Tradeapi_V1_CancelOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Tradeapi_V1_CancelOrderResult {
    return try await self.performAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  internal func getOrders(
    _ request: Proto_Tradeapi_V1_GetOrdersRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Proto_Tradeapi_V1_GetOrdersResult {
    return try await self.performAsyncUnaryCall(
      path: Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.getOrders.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Grpc_Tradeapi_V1_OrdersAsyncClient: Grpc_Tradeapi_V1_OrdersAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Grpc_Tradeapi_V1_OrdersClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'newOrder'.
  func makeNewOrderInterceptors() -> [ClientInterceptor<Proto_Tradeapi_V1_NewOrderRequest, Proto_Tradeapi_V1_NewOrderResult>]

  /// - Returns: Interceptors to use when invoking 'cancelOrder'.
  func makeCancelOrderInterceptors() -> [ClientInterceptor<Proto_Tradeapi_V1_CancelOrderRequest, Proto_Tradeapi_V1_CancelOrderResult>]

  /// - Returns: Interceptors to use when invoking 'getOrders'.
  func makeGetOrdersInterceptors() -> [ClientInterceptor<Proto_Tradeapi_V1_GetOrdersRequest, Proto_Tradeapi_V1_GetOrdersResult>]
}

internal enum Grpc_Tradeapi_V1_OrdersClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Orders",
    fullName: "grpc.tradeapi.v1.Orders",
    methods: [
      Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.newOrder,
      Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.cancelOrder,
      Grpc_Tradeapi_V1_OrdersClientMetadata.Methods.getOrders,
    ]
  )

  internal enum Methods {
    internal static let newOrder = GRPCMethodDescriptor(
      name: "NewOrder",
      path: "/grpc.tradeapi.v1.Orders/NewOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelOrder = GRPCMethodDescriptor(
      name: "CancelOrder",
      path: "/grpc.tradeapi.v1.Orders/CancelOrder",
      type: GRPCCallType.unary
    )

    internal static let getOrders = GRPCMethodDescriptor(
      name: "GetOrders",
      path: "/grpc.tradeapi.v1.Orders/GetOrders",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Grpc_Tradeapi_V1_OrdersProvider: CallHandlerProvider {
  var interceptors: Grpc_Tradeapi_V1_OrdersServerInterceptorFactoryProtocol? { get }

  /// Creates new order.
  /// Order placement in OrderBook takes some time due to processing speed,
  /// that is why this method returns transaction_id, which can be used
  /// to find corresponding order in GetOrdersRequest or in OrderEvent message
  /// of Events service (EventResponse.event.order).
  /// Создать новую заявку.
  /// На обработку нового поручения по размещению заявки в биржевой стакан
  /// требуется некоторое время, поэтому этот метод возвращает структуру с
  /// transaction_id, которая может быть использована для поиска соответствующей
  /// заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий
  /// (EventResponse.event.order).
  func newOrder(request: Proto_Tradeapi_V1_NewOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Tradeapi_V1_NewOrderResult>

  /// Cancels order.
  /// Отменяет заявку.
  func cancelOrder(request: Proto_Tradeapi_V1_CancelOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Tradeapi_V1_CancelOrderResult>

  /// Returns the list of orders.
  /// Возвращает список заявок.
  func getOrders(request: Proto_Tradeapi_V1_GetOrdersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Proto_Tradeapi_V1_GetOrdersResult>
}

extension Grpc_Tradeapi_V1_OrdersProvider {
  internal var serviceName: Substring {
    return Grpc_Tradeapi_V1_OrdersServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "NewOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_NewOrderRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_NewOrderResult>(),
        interceptors: self.interceptors?.makeNewOrderInterceptors() ?? [],
        userFunction: self.newOrder(request:context:)
      )

    case "CancelOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_CancelOrderRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_CancelOrderResult>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        userFunction: self.cancelOrder(request:context:)
      )

    case "GetOrders":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_GetOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_GetOrdersResult>(),
        interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? [],
        userFunction: self.getOrders(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Grpc_Tradeapi_V1_OrdersAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Grpc_Tradeapi_V1_OrdersServerInterceptorFactoryProtocol? { get }

  /// Creates new order.
  /// Order placement in OrderBook takes some time due to processing speed,
  /// that is why this method returns transaction_id, which can be used
  /// to find corresponding order in GetOrdersRequest or in OrderEvent message
  /// of Events service (EventResponse.event.order).
  /// Создать новую заявку.
  /// На обработку нового поручения по размещению заявки в биржевой стакан
  /// требуется некоторое время, поэтому этот метод возвращает структуру с
  /// transaction_id, которая может быть использована для поиска соответствующей
  /// заявки через GetOrdersRequest или в сообщении OrderEvent от сервиса событий
  /// (EventResponse.event.order).
  func newOrder(
    request: Proto_Tradeapi_V1_NewOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Tradeapi_V1_NewOrderResult

  /// Cancels order.
  /// Отменяет заявку.
  func cancelOrder(
    request: Proto_Tradeapi_V1_CancelOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Tradeapi_V1_CancelOrderResult

  /// Returns the list of orders.
  /// Возвращает список заявок.
  func getOrders(
    request: Proto_Tradeapi_V1_GetOrdersRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Proto_Tradeapi_V1_GetOrdersResult
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Grpc_Tradeapi_V1_OrdersAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Grpc_Tradeapi_V1_OrdersServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Grpc_Tradeapi_V1_OrdersServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Grpc_Tradeapi_V1_OrdersServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "NewOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_NewOrderRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_NewOrderResult>(),
        interceptors: self.interceptors?.makeNewOrderInterceptors() ?? [],
        wrapping: { try await self.newOrder(request: $0, context: $1) }
      )

    case "CancelOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_CancelOrderRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_CancelOrderResult>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        wrapping: { try await self.cancelOrder(request: $0, context: $1) }
      )

    case "GetOrders":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Proto_Tradeapi_V1_GetOrdersRequest>(),
        responseSerializer: ProtobufSerializer<Proto_Tradeapi_V1_GetOrdersResult>(),
        interceptors: self.interceptors?.makeGetOrdersInterceptors() ?? [],
        wrapping: { try await self.getOrders(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Grpc_Tradeapi_V1_OrdersServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'newOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewOrderInterceptors() -> [ServerInterceptor<Proto_Tradeapi_V1_NewOrderRequest, Proto_Tradeapi_V1_NewOrderResult>]

  /// - Returns: Interceptors to use when handling 'cancelOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelOrderInterceptors() -> [ServerInterceptor<Proto_Tradeapi_V1_CancelOrderRequest, Proto_Tradeapi_V1_CancelOrderResult>]

  /// - Returns: Interceptors to use when handling 'getOrders'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrdersInterceptors() -> [ServerInterceptor<Proto_Tradeapi_V1_GetOrdersRequest, Proto_Tradeapi_V1_GetOrdersResult>]
}

internal enum Grpc_Tradeapi_V1_OrdersServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Orders",
    fullName: "grpc.tradeapi.v1.Orders",
    methods: [
      Grpc_Tradeapi_V1_OrdersServerMetadata.Methods.newOrder,
      Grpc_Tradeapi_V1_OrdersServerMetadata.Methods.cancelOrder,
      Grpc_Tradeapi_V1_OrdersServerMetadata.Methods.getOrders,
    ]
  )

  internal enum Methods {
    internal static let newOrder = GRPCMethodDescriptor(
      name: "NewOrder",
      path: "/grpc.tradeapi.v1.Orders/NewOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelOrder = GRPCMethodDescriptor(
      name: "CancelOrder",
      path: "/grpc.tradeapi.v1.Orders/CancelOrder",
      type: GRPCCallType.unary
    )

    internal static let getOrders = GRPCMethodDescriptor(
      name: "GetOrders",
      path: "/grpc.tradeapi.v1.Orders/GetOrders",
      type: GRPCCallType.unary
    )
  }
}
