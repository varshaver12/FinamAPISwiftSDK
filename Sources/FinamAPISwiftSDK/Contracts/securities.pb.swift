// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: grpc/tradeapi/v1/securities.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Securities list request.
/// Запрос списка инструментов.
struct Grpc_Tradeapi_V1_GetSecuritiesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Trading Board.
  /// Режим торгов
  var board: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _board ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_board = newValue}
  }
  /// Returns true if `board` has been explicitly set.
  var hasBoard: Bool {return self._board != nil}
  /// Clears the value of `board`. Subsequent reads from it will return its default value.
  mutating func clearBoard() {self._board = nil}

  /// Security Code.
  /// Тикер инструмента.
  var seccode: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _seccode ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_seccode = newValue}
  }
  /// Returns true if `seccode` has been explicitly set.
  var hasSeccode: Bool {return self._seccode != nil}
  /// Clears the value of `seccode`. Subsequent reads from it will return its default value.
  mutating func clearSeccode() {self._seccode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _board: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _seccode: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

/// Result of get security lists request.
/// Результат выполнения запроса списка инструментов.
struct Grpc_Tradeapi_V1_GetSecuritiesResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Securities list.
  /// Список инструментов.
  var securities: [Proto_Tradeapi_V1_Security] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Grpc_Tradeapi_V1_GetSecuritiesRequest: @unchecked Sendable {}
extension Grpc_Tradeapi_V1_GetSecuritiesResult: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "grpc.tradeapi.v1"

extension Grpc_Tradeapi_V1_GetSecuritiesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSecuritiesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "board"),
    2: .same(proto: "seccode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._board) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._seccode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._board {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._seccode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Tradeapi_V1_GetSecuritiesRequest, rhs: Grpc_Tradeapi_V1_GetSecuritiesRequest) -> Bool {
    if lhs._board != rhs._board {return false}
    if lhs._seccode != rhs._seccode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Grpc_Tradeapi_V1_GetSecuritiesResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetSecuritiesResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "securities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.securities) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.securities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.securities, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Grpc_Tradeapi_V1_GetSecuritiesResult, rhs: Grpc_Tradeapi_V1_GetSecuritiesResult) -> Bool {
    if lhs.securities != rhs.securities {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
